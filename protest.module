<?php

/**
 * @file
 * Display a message on a modal page for every page loaded.
 */

/* Today format for date field */
$GLOBALS['protest_2day'] = array('year' => date('Y'), 'month' => date('n'), 'day' => date('j'));

/* Black Out Speak Out protest */
$GLOBALS['protest_default_date'] = array('year' => 2012, 'month' => 6, 'day' => 4);
$GLOBALS['protest_default_body'] = '<a href="http://blackoutspeakout.ca" target="_blank"><img src="/sites/all/modules/custom/protest/images/website_en.jpg" alt="website_en" width="800" height="627"></a>';


/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function protest_permission() {
  return array(
    'browse without warning' => array(
      'title' => t('Browse without warning'),
      'description' => t('If selected the warning message will not be displayed.'),
    ),
    'administer protest' => array(
      'title' => t('Administer Protest'),
      'description' => t('Perform administration tasks for Black Out Speak Out'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function protest_menu() {
  $items = array();

  $items['admin/config/protest'] = array(
    'title' => 'Protest',
    'description' => 'Modify this settings for a better fit with your design. Remember you can also style the module by CSS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('protest_admin_settings'),
    'access arguments' => array('administer protest'),
    'file' => 'protest.admin.inc',
   );

  return $items;
}

/**
 * Implements hook_init().
 */
function protest_init() {
  global $user;

  // Check if the protest is displayed on every page load
  $display_protest = FALSE;
  if (variable_get('protest_once', TRUE)) {
    if (!session_get('protest_once')) {
      $display_protest = TRUE;
      session_set('protest_once', TRUE);
    }
  }
  else {
    $display_protest = TRUE;
  }

  if ($display_protest) {
    // Check protest dates
    $protest_dates = variable_get('protest_dates',
      array(
        'from' => array(
          'date' => $GLOBALS['protest_default_date'],
          'time' => '00:00'
        ),
        'to' => array(
          'date' => $GLOBALS['protest_default_date'],
          'time' => '23:59'
        ),
      )
    );

    // To avoid potential ambiguity, it's best to use ISO 8601 (YYYY-MM-DD) dates.
    $format = 'Y-m-d';
    $from_date = new DateTime($protest_dates['from']['date']['month'] . '/' . $protest_dates['from']['date']['day'] . '/' . $protest_dates['from']['date']['year']);
    $to_date = new DateTime($protest_dates['to']['date']['month'] . '/' . $protest_dates['to']['date']['day'] . '/' . $protest_dates['to']['date']['year']);

    /* PHP 5.3
    $from_date = date_create_from_format($format, $protest_dates['from']['date']['year'] . '-' . $protest_dates['from']['date']['month'] . '-' . $protest_dates['from']['date']['day']);
    $to_date = date_create_from_format($format, $protest_dates['to']['date']['year'] . '-' . $protest_dates['to']['date']['month'] . '-' . $protest_dates['to']['date']['day']);
    */

    // Change formats to make date comparation
    $from_date = strtotime(date_format($from_date, $format) . ' ' . $protest_dates['from']['time']);
    $to_date = strtotime(date_format($to_date, $format) . ' ' . $protest_dates['to']['time']);
    $now = strtotime('now');

    if (($from_date <= $now) && ($now <= $to_date) && (user_access('browse without warning', $user) == FALSE)) {
      /* TODO: I'm not really sure this is the right way to get code from a template inside Drupal.settings */
      //$clean_widget = str_replace(array("\r\n", "\n", "\r", '"'), array("", "", "", '\"'), protest_widget());
      $clean_widget = protest_widget();

      $module_path = drupal_get_path('module', 'protest');

      drupal_add_css(
        $module_path . '/protest.css',
        array(
          'group' => CSS_DEFAULT,
          'every_page' => TRUE
        )
      );

      drupal_add_js(
        array('protest' => array('widget' => $clean_widget)),
        array(
          'scope' => 'header',
          'type' => 'setting',
          'weight' => JS_THEME,
        )
      );
      drupal_add_js(
        $module_path . '/protest.js',
        array(
          'scope' => 'header',
          'type' => 'file',
          'weight' => JS_THEME,
        )
      );
    }
  }
}

/**
* Implements hook_theme()
*/
function protest_theme() {
  return array(
    'protest_widget' => array(
      'variables' => array('overlay' => NULL, 'body' => NULL),
      'template' => 'protest-widget',
    ),
  );
}

/**
* Create the protest widget to display after the page is loaded.
*/
function protest_widget() {
  $overlay = variable_get('protest_overlay', TRUE);
  $body = variable_get('protest_body', $GLOBALS['protest_default_body']);

  return theme('protest_widget', array('overlay' => $overlay, 'body' => $body));
}

/**
 * Get a session variable.
 */
function session_get($session_name, $default = FALSE) {
  if (isset($_SESSION[$session_name])) {
    return $_SESSION[$session_name];
  }
  return $default;
}

/**
 * Set a session variable.
 */
function session_set($session_name, $session_value) {
  $_SESSION[$session_name] = $session_value;
}