<?php

/**
 * @file
 * Display a blackout modal (ie: website proteset) during configuratble times.
 */


/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function protest_permission() {
  return array(
    'browse without warning' => array(
      'title' => t('bypass protest blackoutt'),
      'description' => t('Navigate site without experience the modal blackout.'),
    ),
    'administer protest' => array(
      'title' => t('administer protest'),
      'description' => t('Access to Protest administration page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function protest_menu() {
  $items = array();

  $items['admin/config/user-interface/protest'] = array(
    'title' => 'Protest',
    'description' => 'Modify this settings for a better fit with your site. Remember you can also style the module by CSS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('protest_admin_settings'),
    'access arguments' => array('administer protest'),
    'file' => 'protest.admin.inc',
   );

  return $items;
}

/**
 * Implements hook_init().
 */
function protest_init() {
  global $user;

  // Check if the protest is displayed on every page load
  $display_protest = FALSE;
  if (variable_get('protest_once', TRUE)) {
    if (!protest_session_get('protest_once')) {
      $display_protest = TRUE;
      protest_session_set('protest_once', TRUE);
    }
  }
  else {
    $display_protest = TRUE;
  }

  if ($display_protest) {
    $from_time = (int) variable_get('protest_from_time', FALSE);
    $to_time = (int) variable_get('protest_to_time', FALSE);
    $now = strtotime('now');


    if (($from_time <= $now) && ($now <= $to_time) && (user_access('browse without warning', $user) == FALSE)) {
      /* TODO: I'm not really sure this is the right way to get code from a template inside Drupal.settings */
      //$clean_widget = str_replace(array("\r\n", "\n", "\r", '"'), array("", "", "", '\"'), protest_widget());
      $clean_widget = protest_widget();

      $module_path = drupal_get_path('module', 'protest');

      drupal_add_css(
        $module_path . '/protest.css',
        array(
          'group' => CSS_DEFAULT,
          'every_page' => TRUE
        )
      );

      drupal_add_js(
        array('protest' => array('widget' => $clean_widget)),
        array(
          'scope' => 'header',
          'type' => 'setting',
          'weight' => JS_THEME,
        )
      );
      drupal_add_js(
        $module_path . '/protest.js',
        array(
          'scope' => 'header',
          'type' => 'file',
          'weight' => JS_THEME,
        )
      );
    }
  }
}

/**
* Implements hook_theme()
*/
function protest_theme() {
  return array(
    'protest_widget' => array(
      'variables' => array('overlay' => NULL, 'body' => NULL),
      'template' => 'protest-widget',
    ),
  );
}

/**
* Create the protest widget to display after the page is loaded.
*/
function protest_widget() {
  $overlay = variable_get('protest_overlay', TRUE);
  $body = variable_get('protest_body', $GLOBALS['protest_default_body']);

  return theme('protest_widget', array('overlay' => $overlay, 'body' => $body));
}

/**
 * Get a session variable.
 */
function protest_session_get($session_name, $default = FALSE) {
  if (isset($_SESSION[$session_name])) {
    return $_SESSION[$session_name];
  }
  return $default;
}

/**
 * Set a session variable.
 */
function protest_session_set($session_name, $session_value) {
  $_SESSION[$session_name] = $session_value;
}